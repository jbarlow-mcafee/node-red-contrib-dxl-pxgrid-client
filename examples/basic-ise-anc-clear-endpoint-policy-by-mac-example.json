[
    {
        "id": "a022ca92.416098",
        "type": "tab",
        "label": "ISE ANC Clear Endpoint Policy By MAC Address Example",
        "disabled": false,
        "info": "This sample clears a Cisco Adaptive Network Control (ANC) policy from an\r\nendpoint via DXL and Cisco pxGrid. The sample identifies the endpoint by its MAC\r\naddress. The payload from the response received for the Cisco pxGrid request is\r\nprinted to the Node-RED `debug` tab.\r\n\r\n### Prerequisites\r\n\r\n* The samples configuration step has been completed (see the\r\n  [DXL Configuration Sample](https://github.com/opendxl/node-red-contrib-dxl/wiki/Client-Configuration)).\r\n* The DXL fabric to which the client will connect has been bridged to Cisco\r\n  pxGrid.\r\n* The DXL client associated with the `Clear quarantine policy from endpoint` node has been authorized to perform `DXL Cisco pxGrid Queries`\r\n  (see [Authorize Client to Use Cisco pxGrid via DXL](https://opendxl.github.io/opendxl-pxgrid-client-python/pydoc/pxgridauth.html)).\r\n* Import and run the `ISE ANC Apply Endpoint Policy By MAC Address` example to\r\n  apply a policy to an endpoint. A run of this example can then clear\r\n  the policy.\r\n\r\n### Setup\r\n\r\n* Edit the `Specify MAC address` node and modify the `Payload` property with the\r\n  MAC address of an endpoint for which to clear the `quarantine_policy`.\r\n  For example:\r\n\r\n  ```\r\n  00:11:22:33:44:55\r\n  ```\r\n\r\n* To deploy the flow, press the `Deploy` button in the upper-right corner of the\r\n  screen. If Node-RED is able to properly connect to the DXL fabric, a green dot\r\n  with the word `connected` should appear under the\r\n  `Clear quarantine policy from endpoint` node.\r\n\r\n### Running\r\n\r\nTo exercise the flow, double-click the button on the left side of the\r\n`Specify MAC address` node.\r\n\r\n### Output\r\n\r\nIf the policy can be cleared successfully, the following message will be\r\ndisplayed to the Node-RED `debug` tab:\r\n\r\n```\r\nâ–¶ { ancStatus: \"success\" }\r\n```\r\n\r\nIf no policy has been associated with the endpoint before the example\r\nis run, the flow is halted with an `error.message` similar to the following:\r\n\r\n```\r\nmac address is not associated with a policy error associated with mac 00:11:22:33:44:55\r\n```\r\n\r\n### Details\r\n\r\nThe flow exercises the nodes below.\r\n\r\n#### Specify IP address\r\n\r\nThis is an `inject` input node which starts the flow. This node injects a new\r\nmessage with a `payload` property which specifies the MAC address of an\r\nendpoint.\r\n\r\n#### Set MAC address request parameter\r\n\r\nThis is a `change` node which copies the value from the `payload` message\r\nproperty to the `macAddress` property. The\r\n`Clear quarantine policy from endpoint` node uses the `macAddress` property when\r\nconstructing the parameters for the Cisco pxGrid clear endpoint policy request.\r\n\r\n#### Clear quarantine policy from endpoint\r\n\r\nThis is an `ise anc clear endpoint policy by mac` node. This node connects to\r\nthe DXL fabric and sends a DXL `Request` message to Cisco pxGrid service to\r\nclear the policy from the endpoint.\r\n\r\nThe request message includes the `macAddress` property set by the\r\n`Set MAC address request parameter` node.\r\n\r\nThe `Policy name` property is set to \"quarantine_policy\".\r\n\r\nThe `Return` property is set to \"a parsed JSON object\" to indicate that the\r\npayload for the response should be added to the output message as a JavaScript\r\nobject decoded from JSON.\r\n\r\n#### Output result\r\n\r\nThis is a `debug` output node. This node outputs the `payload` set on the\r\nmessage by the `Clear quarantine policy from endpoint` node. If the clear\r\nendpoint policy request succeeded, the object written to the Node-RED `debug`\r\nwindow should contain a property with a key of \"ancStatus\" and associated value\r\nof \"success\"."
    },
    {
        "id": "f02630b1.15582",
        "type": "dxl-ise-anc-clear-endpoint-policy-by-mac",
        "z": "a022ca92.416098",
        "name": "Clear quarantine policy from endpoint",
        "policyName": "quarantine_policy",
        "client": "",
        "returnType": "obj",
        "x": 330,
        "y": 280,
        "wires": [
            [
                "4977f212.d157ac"
            ]
        ]
    },
    {
        "id": "4977f212.d157ac",
        "type": "debug",
        "z": "a022ca92.416098",
        "name": "Output result",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "x": 430,
        "y": 380,
        "wires": []
    },
    {
        "id": "106adef1.171441",
        "type": "inject",
        "z": "a022ca92.416098",
        "name": "Specify MAC address",
        "topic": "",
        "payload": "<SPECIFY_MAC_ADDRESS>",
        "payloadType": "str",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "x": 140,
        "y": 100,
        "wires": [
            [
                "821df095.f2296"
            ]
        ]
    },
    {
        "id": "821df095.f2296",
        "type": "change",
        "z": "a022ca92.416098",
        "name": "Set MAC address request parameter",
        "rules": [
            {
                "t": "set",
                "p": "macAddress",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 270,
        "y": 180,
        "wires": [
            [
                "f02630b1.15582"
            ]
        ]
    },
    {
        "id": "ffad2cdf.e9a8c",
        "type": "comment",
        "z": "a022ca92.416098",
        "name": "Supply the MAC address in the 'Specify MAC address' node",
        "info": "",
        "x": 240,
        "y": 40,
        "wires": []
    }
]
